{% set name = "libint" %}
{% set version = "2.9.0" %}
{% set version_src = "2.9.0" %}

# toy-sized source tarball for recipe testing
{% set url_toy = "https://github.com/loriab/libint/releases/download/v0.1/libint-2.9.0-2-2-3-2_0.tgz" %}
{% set sha256_toy = "280744ec50d57e36c1147b87aa5dab42ae088cd16e6a07cbe0020f48597b24cb" %}

# production source tarball: L/M build w/i 3h but W hangs
{% set url_bells = "https://github.com/loriab/libint/releases/download/v0.1/libint-2.9.0-6-6-3-7-7-4_mm10f12ob2_0.tgz" %}
{% set sha256_bells = "39a409afe28c43847a727200056035af56e1c02dcee97ff5ed5275395d6ed3cc" %}

# production source tarball: no Hessian ERIs but works for W
{% set url_basic = "https://github.com/loriab/libint/releases/download/v0.1/libint-2.9.0-6-6-7-7_mm10f12ob2_0.tgz" %}
{% set sha256_basic = "9f3061886e7ace9bad253d8a8a2098cb77ea2d8a63a518f3dfe4dd994633a37c" %}

{% set url_littlebells = "https://github.com/loriab/libint/releases/download/v0.1/libint-2.9.0-5-5-3-6-6-4_mm10f12ob2_0.tgz" %}
{% set sha256_littlebells = "6b751648f7b69fc585f5ae1a426dcdcfb4bd0844c424b9f69604ca5a6a148de1" %}

# source tarball pattern for upstream
# {% set url = "https://github.com/evaleev/{{ name }}/releases/download/v{{ version }}/{{ name }}-{{ version }}.tgz" %}

package:
  name: {{ name|lower }}-split
  version: {{ version }}

# NOTE TO ANYONE ITERATING BUILD CHANGES: This recipe takes the full 6h.
#   But if you toggle the url and sha for all arch to url_toy and sha256_toy, it'll
#   take <30m and all recipe tests will still pass. This is highly recommended for sanity.

source:
  url: {{ url_toy }}
  #url: {{ url_bells }}        # [unix and not (aarch64 or ppc64le)]
  #url: {{ url_basic }}        # [win]
  #url: {{ url_littlebells }}  # [aarch64 or ppc64le]
  sha256: {{ sha256_toy }}
  #sha256: {{ sha256_bells }}  # [unix and not (aarch64 or ppc64le)]
  #sha256: {{ sha256_basic }}  # [win]
  #sha256: {{ sha256_littlebells }}  # [aarch64 or ppc64le]
  # note: source/url above is a tarball of generated library source code.
  # * the upstream generator project is: https://github.com/evaleev/libint
  # * tarballs aren't upstream release artifacts but have been generated with
  #   different configuration from upstream release tag. See NOTES file.
  # * W times out and linux-aarch64 abandons at ~5h, so these use smaller src

build:
  number: 3
  script_env:
    - ENABLE_FORTRAN=ON       # [unix]
    - ENABLE_FORTRAN=OFF      # [win]

#requirements:
#  build:
#    - {{ stdlib("c") }}
#    - {{ compiler("c") }}
#    - {{ compiler("cxx") }}
#    - {{ compiler("fortran") }}  # [unix]
#    - cmake
#    - ninja
#  host:
#    # note: alternately, could withhold boost here so that a vendored subset of boost headers gets installed
#    #   at include/libint2/boost/ . Then downstream builds against libint2 don't need a Boost dependency.
#    # * OpenMP only present in one L2 file
#    - libboost-headers
#    - eigen
#    - llvm-openmp  # [unix]

outputs:
  - name: libint
    script: build-cxx.sh                  # [unix]
    script: bld-cxx.bat                   # [win]
    build:
      run_exports:
        - {{ pin_subpackage('libint', max_pin='x') }}
    requirements:
      build:
        - {{ stdlib("c") }}
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
#        - {{ compiler("fortran") }}       # [unix]
        - cmake
        - ninja
      host:
        - libboost-headers
        - eigen
        - llvm-openmp                     # [unix]
    files:
      - include/libint2.h*                # [unix]
      - include/libint2                   # [unix]
      - lib/libint2{{ SHLIB_EXT }}*       # [linux]
      - lib/libint2.*dylib                # [osx]
      - lib/cmake/libint2                 # [unix]
      - lib/pkgconfig/libint2.pc          # [unix]
      - share/libint                      # [unix]
      - Library/include/libint2.h*        # [win]
      - Library/include/libint2           # [win]
      - Library/bin/int2*                 # [win]
      - Library/lib/int2*                 # [win]
      - Library/lib/cmake/libint2         # [win]
      - Library/lib/pkgconfig/libint2.pc  # [win]
      - Library/share/libint              # [win]
    test:
      requires:
        - {{ compiler("cxx") }}
        - cmake
        - ninja
        - python 3.12  # only for running a validation script, so suppress all but one Py version. update as necessary.
        - eigen
        - libboost-headers
      files:
        - tests/hartree-fock/CMakeLists.txt
      source_files:
        - MakeVars.features
        - tests/hartree-fock/h2o_rotated.xyz
        - tests/hartree-fock/hartree-fock++.cc
        - tests/hartree-fock/hartree-fock++-validate.py
      commands:
        - ls -l $PREFIX/lib                                                  # [unix]
        - ls -l $PREFIX/lib/cmake/libint2                                    # [unix]
        - dir %PREFIX%\\Library                                              # [win]
        - dir %PREFIX%\\Library\\include                                     # [win]
        # Verify library
        - test -f $PREFIX/lib/libint2$SHLIB_EXT                              # [unix]
        - test ! -f $PREFIX/lib/libint2.a                                    # [unix]
        - if not exist %PREFIX%\\Library\\lib\\int2.lib exit 1               # [win]
        - if exist %PREFIX%\\Library\\bin\\int2.dll exit 1                   # [win]
        # Verify accessories
        - test -f $PREFIX/include/libint2.h                                  # [unix]
        - test -f $PREFIX/include/libint2/engine.h                           # [unix]
        - test ! -f $PREFIX/include/libint2/boost/preprocessor.hpp           # [unix]
        - test -f $PREFIX/share/libint/{{ version_src }}/basis/sto-6g.g94    # [unix]
        - test -f $PREFIX/lib/cmake/libint2/libint2-config.cmake             # [unix]
        - test -f $PREFIX/lib/pkgconfig/libint2.pc                           # [unix]
        - test ! -f $PREFIX/include/libint_f.mod                             # [unix]
        - if not exist %PREFIX%\\Library\\include\\libint2.h exit 1          # [win]
        - if not exist %PREFIX%\\Library\\include\\libint2\\engine.h exit 1  # [win]
        - if exist %PREFIX%\\Library\\include\\libint2\\boost\\preprocessor.hpp exit 1  # [win]
        - if not exist %PREFIX%\\Library\\share\\libint\\{{ version_src }}\\basis\\sto-6g.g94 exit 1  # [win]
        - if not exist %PREFIX%\\Library\\lib\\cmake\\libint2\\libint2-config.cmake exit 1  # [win]
        - if not exist %PREFIX%\\Library\\lib\\pkgconfig\\libint2.pc exit 1  # [win]
        - if exist %PREFIX%\\Library\\include\\libint_f.mod exit 1           # [win]
        # Inspect linkage
        - ldd -v $PREFIX/lib/libint2$SHLIB_EXT                               # [linux and build_platform == target_platform]
        - otool -L $PREFIX/lib/libint2$SHLIB_EXT                             # [osx]
        # Actually test
        - cd tests/hartree-fock
        - set "LDFLAGS=%LDFLAGS:/link =%"                                    # [win]
        - cmake -S. -Bbuild -GNinja -DCMAKE_PREFIX_PATH="${PREFIX}"          # [unix]
        - cmake -S. -Bbuild -GNinja -DCMAKE_PREFIX_PATH="%LIBRARY_PREFIX%" -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_BUILD_TYPE=Release  # [win]
        - cmake --build build
        - ./build/hf++ h2o_rotated.xyz | python hartree-fock++-validate.py ../../MakeVars.features  # [unix]
        - build\\hf++.exe h2o_rotated.xyz | python hartree-fock++-validate.py ..\\..\\MakeVars.features  # [win]

  - name: libint-fortran-devel
    script: build-cxx.sh                  # [unix]
    script: bld-cxx.bat                   # [win]
    build:
      skip: true                          # [win]
      run_exports:
          # runtime needs libint, not libint-fortran-devel, but I think this is now to get *exact* libint
        - {{ pin_subpackage('libint-fortran-devel', max_pin='x') }}
    requirements:
      build:
        - {{ stdlib("c") }}
        - {{ compiler("c") }}
        - {{ compiler("fortran") }}
        - cmake
        - ninja
      host:
        - {{ pin_subpackage('libint', exact=True) }}
      run:
        - {{ pin_subpackage('libint', exact=True) }}
    files:
      - include/*.mod                                                        # [unix]
      - Library/include/*mod                                                 # [win]
    test:
      commands:
        # Verify library (no F library but check C)
        - test -f $PREFIX/lib/libint2$SHLIB_EXT                              # [unix]
        - if not exist %PREFIX%\\Library\\lib\\int2.lib exit 1               # [win]
        # Verify accessories
        - test -e $PREFIX/include/libint_f.mod                               # [unix]
        - test -f $PREFIX/include/libint2.h                                  # [unix]
        - if not exist %PREFIX%\\Library\\include\\libint_f.mod exit 1       # [win]
        - if not exist %PREFIX%\\Library\\include\\libint2.h exit 1          # [win]
        # Inspect linkage (no F library)

about:
  home: https://github.com/evaleev/libint
  dev_url: https://github.com/evaleev/libint
  doc_url: https://github.com/evaleev/libint/wiki
  license: LGPL-3.0-only
  license_url: https://opensource.org/license/lgpl-3-0/
  license_file:
    - LICENSE
    - COPYING.LESSER
  license_family: LGPL
  summary: "Libint is E. Valeev's library for the evaluation of molecular integrals of many-body operators over Gaussian functions"

extra:
  feedstock-name: libint
  recipe-maintainers:
    - felipeZ
    - loriab
